C251 COMPILER V5.60.0,  main                                                               16/05/23  09:58:13  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\obj\main.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE User\main.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\User;.\Hard
                    -ware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\System;
                    -.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardware\Queue) PRI
                    -NT(.\obj\main.lst) OBJECT(.\obj\main.obj) 

stmt  level    source

    1          #include "Sensor.h"
    2          #include "mcp4725.h"
    3          #include "system.h"
    4          #include "main.h"
    5          #include "CMD.h"
    6          #include "uart.h"
    7          #include "i2c.h"
    8          #include "flash.h"
    9          #include "CalcDoseRate.h"
   10          #include "DoseRate.h"
   11          
   12          LP_SYSTEM_STTAE SysRunState={0};
   13          
   14          extern void Adc_Init();
   15          extern uint16_t DeviceGetBatVal(void);
   16          extern void DeviceGetBatAlarm(STU_BATTERY *bat);
   17          extern STU_BATTERY s_Bat;
   18          
   19          //unsigned int ADC16Result = 0; 
   20          
   21          //========================================================================
   22          // 函数名称: void InitParam()
   23          // 函数功能: 初始化各个参数
   24          // 入口参数: @无
   25          // 函数返回: 无
   26          // 当前版本: VER1.0
   27          // 修改日期: 2023.5.5
   28          // 当前作者:
   29          // 其他备注: 
   30          //========================================================================
   31          
   32          void InitParam(LP_PARAM *param)
   33          {
   34   1              memset((void*)param,0,sizeof(LP_PARAM));
   35   1              param->SensorType = SENSOR_LONGPOLE;//探头类型
   36   1              param->s_SysParam.Hv = 800;      //高压值
   37   1              param->s_SysParam.Z1 = 2500-600;//甄别器阈值1
   38   1              param->s_SysParam.Ct = 1000;    //计数时间
   39   1              param->s_SysParam.Hd = 3;        //高压误差
   40   1              param->s_SysParam.Z2 = 1100;    //甄别器阈值2
   41   1              param->s_SysParam.Hn = 0x5a;
   42   1      
   43   1              param->s_SysParam.DiYaCanshuA = 0.63;//低量程通道校准因子
   44   1              param->s_SysParam.DiYaCanshuB = 0.00019;//低量程通道校准因子
   45   1              param->s_SysParam.DiYaCanshuC = 0.83; //1;//低量程通道校准因子
   46   1              param->s_SysParam.GaoYaCanshuA = 33.6;//高量程通道校准因子
   47   1              param->s_SysParam.GaoYaCanshuB = 0.000023;//高量程通道校准因子
   48   1              param->s_SysParam.GaoYaCanshuC = 0.83; // ;//高量程通道校准因子
   49   1              
   50   1              param->s_Alarm.DosePreAlarm = 300;//300uSv
   51   1              param->s_Alarm.DoseAlarm = 400;//400uSv
   52   1              param->s_Alarm.DoseRatePreAlarm = 300;//300uSv/h
   53   1              param->s_Alarm.DoseRateAlarm = 400;//400uSv/h
   54   1      
   55   1              WritePara();
   56   1      }
C251 COMPILER V5.60.0,  main                                                               16/05/23  09:58:13  PAGE 2   

   57          
   58          void DevInit(void)
   59          {
   60   1          BLUE_PWOFF();
   61   1              GM_LOW;
   62   1              BLUE_CFG_MODE();
   63   1              BLUE_WAKEUP();
   64   1      }
   65          void sysSleep(void)
   66          {
   67   1              SysRunState.isSleep = 1;
   68   1              //LPM3;
   69   1      }
   70          
   71          void DevSleep(void)
   72          {
   73   1              SENSOR_POWER_OFF();//暂时先不关高压
   74   1              BLUE_CFG_MODE();
   75   1              delay_ms(2500);
   76   1              uartble_send("AT+CLEARADDR\r\n",14);//清除远端蓝牙地址
   77   1              delay_ms(500);
   78   1              BLUE_WORK_MODE();
   79   1              BLUE_SLEEP();
   80   1              T3R = 0;
   81   1              sysSleep();
   82   1              SensorMeasureBegin();//开始测量 
   83   1              T3R = 1;
   84   1              SENSOR_POWER_ON();
   85   1      }
   86          
   87          
   88          void BtInit()
   89          {
   90   1          BLUE_WORK_MODE();
   91   1          BLUE_SLEEP();
   92   1          BLUE_PWOFF();
   93   1          delay_ms(500);
   94   1          
   95   1          BLUE_PWON();
   96   1          BLUE_WAKEUP();
   97   1          BLUE_CFG_MODE();
   98   1      
   99   1                  
  100   1              uartble_send("AT+ROLE=0\r\n",11);//从模式
  101   1              delay_ms(500);
  102   1              uartble_send("AT+LOWPOWER=1\r\n",15);//允许低功耗
  103   1              delay_ms(500);
  104   1              uartble_send("AT+TXPOWER=7\r\n",14);//发射功率0~7
  105   1              delay_ms(500);
  106   1          
  107   1              uartble_send("AT+CLEARADDR\r\n",14);//清除远端蓝牙地址
  108   1              delay_ms(500);
  109   1              uartble_send("AT+AUTH=1\r\n",11);//设置鉴权
  110   1              delay_ms(500);
  111   1              uartble_send("AT+BIND=1\r\n",11);//设置绑定地址
  112   1              delay_ms(500);
  113   1          
  114   1              /*MSP430XX_UART_Send("AT+RADDR?\r\n",11);//
  115   1              delay_ms(500);
  116   1              MSP430XX_UART_Send("AT+BLECONNPARAM?\r\n",18);
  117   1              delay_ms(1000);
  118   1              MSP430XX_UART_Send("AT+DFU\r\n",8);
  119   1              delay_ms(1000);*/
  120   1      
  121   1          
  122   1          BLUE_WORK_MODE();
C251 COMPILER V5.60.0,  main                                                               16/05/23  09:58:13  PAGE 3   

  123   1      }
  124          
  125          
  126          //========================================================================
  127          // 函数名称: void delay_ms(WORD ms)  
  128          // 函数功能: 毫秒延时函数
  129          // 入口参数: @WORD ms：延时多少毫秒
  130          // 函数返回: 无
  131          // 当前版本: VER1.0
  132          // 修改日期: 2023.5.5
  133          // 当前作者:
  134          // 其他备注: 
  135          //========================================================================
  136          void delay_ms(WORD ms)              
  137          {
  138   1          WORD t = 1000;
  139   1          while(ms--)
  140   1          {
  141   2              for (t=0;t<1000;t++) ;
  142   2          }
  143   1      }
  144          
  145          
  146          void delay_us(BYTE us)
  147          {
  148   1          while(us--)
  149   1          {
  150   2              ;
  151   2          }
  152   1      }
  153          
  154          //========================================================================
  155          // 函数名称: void IoInit()
  156          // 函数功能: 单片机I/O口初始化
  157          // 入口参数: @无
  158          // 函数返回: 无
  159          // 当前版本: VER1.0
  160          // 修改日期: 2023.5.5
  161          // 当前作者:
  162          // 其他备注: 
  163          //========================================================================
  164          void IoInit()
  165          {
  166   1          EAXFR = 1;
  167   1          WTST = 0;                       //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
  168   1      
  169   1          P0M1 = 0x00;   P0M0 = 0x00;     //设置为准双向口
  170   1          P1M1 = 0x00;   P1M0 = 0x00;     //设置为准双向口
  171   1          P2M1 = 0x02;   P2M0 = 0x00;     //设置为准双向口
  172   1          P3M1 = 0x00;   P3M0 = 0x00;     //P3.3设置为推挽输出
  173   1          P4M1 = 0x00;   P4M0 = 0x00;     //设置为准双向口
  174   1          P5M1 = 0x00;   P5M0 = 0x00;     //设置为准双向口
  175   1          P6M1 = 0x00;   P6M0 = 0x00;     //设置为准双向口
  176   1          P7M1 = 0x00;   P7M0 = 0x00;     //设置为准双向口
  177   1      }
  178          
  179          //========================================================================
  180          // 函数名称: void TimerTask()
  181          // 函数功能: 定时任务，通过定时器0定时10ms来设置相关任务
  182          // 入口参数: @无
  183          // 函数返回: 无
  184          // 当前版本: VER1.0
  185          // 修改日期: 2023.5.5
  186          // 当前作者:
  187          // 其他备注: 
  188          //========================================================================
C251 COMPILER V5.60.0,  main                                                               16/05/23  09:58:13  PAGE 4   

  189          void TimerTask()
  190          {
  191   1          u16 delta = 0;
  192   1          static u16 Time1s = 0;
  193   1          if(Timer0Cnt)
  194   1          {
  195   2              delta = Timer0Cnt * 10;
  196   2              Timer0Cnt = 0;
  197   2              if(RX1_Cnt>0)
  198   2              {
  199   3                  Rx1_Timer += delta;
  200   3              }
  201   2              if(RX3_Cnt>0)
  202   2              {
  203   3                  Rx3_Timer += delta;
  204   3              }
  205   2              Time1s += delta;
  206   2              if(Time1s >= 1000)                      //100*10=1000ms
  207   2              {
  208   3                  Time1s = 0;
  209   3                  SysRunState.isCanReadSensor = 1;
  210   3      
  211   3                  Pluse3Cnt = 100;//((u32)LowOverFlowFlag*65536)<<8 | (u32)(T3H*256+T3L) ;
  212   3                  T3R = 0; 
  213   3                  T3H = 0;
  214   3                  T3L = 0;
  215   3                  T3R = 1;            
  216   3      
  217   3                  Pluse3PortCnt = 0;
  218   3                  LowOverFlowFlag3 = 0;
  219   3      
  220   3                  Pluse4Cnt = 200;//((u32)LowOverFlowFlag4*65536)<<8 | (u32)(T4H*256+T4L) ;
  221   3                  T4R = 0; 
  222   3                  T4H = 0;
  223   3                  T4L = 0;
  224   3                  T4R = 1;            
  225   3      
  226   3                  Pluse4PortCnt = 0;
  227   3                  LowOverFlowFlag4 = 0;
  228   3              }
  229   2          }
  230   1          if(SysRunState.NoUartTime > POWER_OFF_TIME)
  231   1          {
  232   2              DevSleep();
  233   2          }
  234   1          else
  235   1          {
  236   2              sysSleep();
  237   2          }
  238   1      }
  239          
  240          //========================================================================
  241          // 函数名称: void Rs485Hnd()
  242          // 函数功能: 通过RS485与上位机握手
  243          // 入口参数: @无
  244          // 函数返回: 无
  245          // 当前版本: VER1.0
  246          // 修改日期: 2023.5.5
  247          // 当前作者:
  248          // 其他备注: 
  249          //========================================================================
  250          void Rs485Hnd()
  251          {
  252   1          if(Rx3_Timer > 20)                  //串口超时20ms
  253   1          {
  254   2              Rx3_Timer = 0;
C251 COMPILER V5.60.0,  main                                                               16/05/23  09:58:13  PAGE 5   

  255   2              DataPro(RX3_Buffer,RX3_Cnt);
  256   2              ClearRs485Buf();
  257   2          }
  258   1      }
  259          
  260          
  261          void Error()
  262          {
  263   1          while(1)
  264   1          {
  265   2              
  266   2              //RUN_LED(1);
  267   2              delay_ms(200);
  268   2              //RUN_LED(0);
  269   2              delay_ms(200);
  270   2          }
  271   1      }
  272          
  273          
  274          int main(void)
  275          {    
  276   1          SysInit();
  277   1      
  278   1          IoInit();
  279   1          //I2C_Init();
  280   1          Adc_Init();
  281   1              DevInit();
  282   1          
  283   1              delay_ms(2000);
  284   1              
  285   1              Uart1_Init();
  286   1          Uart3_Init();
  287   1          ClearRs485Buf();
  288   1          ClearBleBuf();
  289   1          SensorInit();    
  290   1              Timer0_Init();
  291   1              Timer3_Init();
  292   1              Timer4_Init();
  293   1          
  294   1              GetPara(&SysRunState.stParam);
  295   1          
  296   1              EA = 1;
  297   1          
  298   1              //开机先检测一次电池电量
  299   1          DeviceGetBatVal();
  300   1      
  301   1          BtInit();
  302   1          DeviceGetBatVal();
  303   1      
  304   1              BLUE_SLEEP();
  305   1              DeviceGetBatAlarm(&s_Bat);//开机先检测一次电池电量
  306   1              SensorMeasureBegin();//开始测量 
  307   1              InitArr();
  308   1          
  309   1          MCP4725_OutVol(MCP4725_S1_ADDR,2500-(WORD)SysRunState.stParam.s_SysParam.Z1);
  310   1              
  311   1          while(1)
  312   1          {              
  313   2              if(SysRunState.isCanReadSensor == 1)
  314   2              {
  315   3                  CaptureSensorPluseCounter(); //捕获当前测量结果
  316   3                  SensorMeasureBegin();         //开始测量 
  317   3                  SysRunState.isCanReadSensor = 0;
  318   3              }
  319   2      
  320   2              if((SysRunState.NoUartTime >= 90*100)&&(SysRunState.NoUartTime < 93*100))
C251 COMPILER V5.60.0,  main                                                               16/05/23  09:58:13  PAGE 6   

  321   2              {
  322   3                  //长时间无通信数据尝试复位蓝牙模块
  323   3                  BtInit();
  324   3                  //revFlag = 0;
  325   3                  RX1_Cnt = 0;
  326   3                  SensorMeasureBegin();//开始测量 
  327   3                  SysRunState.NoUartTime = 93*100;
  328   3              }
  329   2      
  330   2              Rs485Hnd();
  331   2              TimerTask();
  332   2              
  333   2          }
  334   1      }
  335          
  336          
  337          
  338          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1172     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       240     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       319     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
