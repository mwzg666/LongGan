C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\obj\CMD.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Cmd\CMD.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\User
                    -;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\
                    -System;.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardware\Que
                    -ue) PRINT(.\obj\CMD.lst) OBJECT(.\obj\CMD.obj) 

stmt  level    source

    1          #include <stdlib.h>
    2          #include "CMD.h"
    3          #include "sensor.h"
    4          #include "mcp4725.h"
    5          #include "flash.h"
    6          #include "uart.h"
    7          #include "mwpro.h"
    8          #include "CalcCPS.h"
    9          #include "Mcp4725.h"
   10          #include "crc.h"
   11          
   12          #define FRAM_DELAY delay_ms(100)
   13          
   14          STU_CMD s_Head={0x68};
   15          uint8_t snedbuf[100];
   16          
   17          extern void DeviceGetBatAlarm(STU_BATTERY *bat);
   18          extern void DevSleep(void);
   19          
   20          
   21          //========================================================================
   22          // 函数名称: WORD WordToSmall(WORD dat)
   23          // 函数功能: 将WORD的数据转换为小端模式
   24          // 入口参数: @WORD dat：要转换的数据
   25          // 函数返回: 返回类型为WORD的小端模式数据
   26          // 当前版本: VER1.0
   27          // 修改日期: 2023.5.5
   28          // 当前作者:
   29          // 其他备注: 
   30          //========================================================================
   31          
   32          WORD WordToSmall(WORD dat)
   33          {
   34   1              BYTE buf[2];
   35   1          BYTE t;
   36   1          WORD ret;
   37   1          
   38   1          memcpy(buf, &dat, 2);
   39   1              t = buf[1];
   40   1              buf[0] = buf[1];
   41   1              buf[1] = t;
   42   1              
   43   1          memcpy(&ret, buf, 2);
   44   1          return ret;
   45   1      }
   46          
   47          float FloatToSmall(float dat)
   48          {
   49   1              BYTE buf[4];
   50   1          BYTE t;
   51   1          float ret;
   52   1          
   53   1          memcpy(buf, &dat, 4);
   54   1              t = buf[3];
   55   1              buf[3] = buf[0];
   56   1              buf[0] = t;
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 2   

   57   1              t = buf[2];
   58   1              buf[2] = buf[1];
   59   1              buf[1] = t;
   60   1      
   61   1          memcpy(&ret, buf, 4);
   62   1          return ret;
   63   1      }
   64          
   65          DWORD DwordToSmall(DWORD dat)
   66          {
   67   1              BYTE buf[4];
   68   1          BYTE t;
   69   1          DWORD ret;
   70   1          
   71   1          memcpy(buf, &dat, 4);
   72   1              t = buf[3];
   73   1              buf[3] = buf[0];
   74   1              buf[0] = t;
   75   1              t = buf[2];
   76   1              buf[2] = buf[1];
   77   1              buf[1] = t;
   78   1      
   79   1          memcpy(&ret, buf, 4);
   80   1          return ret;
   81   1      }
   82          
   83          
   84          //========================================================================
   85          // 函数名称: void GetPara(LP_PARAM *me)
   86          // 函数功能: 从FLASH中读取参数，包括"控制参数"和"报警参数"
   87          // 入口参数: @me：数据
   88          // 函数返回: 无
   89          // 当前版本: VER1.0
   90          // 修改日期: 2023.5.5
   91          // 当前作者:
   92          // 其他备注: 
   93          //========================================================================
   94          void GetPara(LP_PARAM *me)
   95          { 
   96   1              EEPROM_read(0,(u8 *)me,sizeof(LP_PARAM));
   97   1          if ( SysRunState.stParam.ParaCheckSum !=  CheckSum((BYTE *)&SysRunState.stParam,sizeof(LP_PARAM)-2))
   98   1              {
   99   2                      InitParam();
  100   2              }
  101   1          SysRunState.stParam.VerSion1 = VERSION1;
  102   1              SysRunState.stParam.VerSion2 = VERSION2;
  103   1              SysRunState.stParam.VerSion3 = VERSION3;
  104   1      }
  105          
  106          //========================================================================
  107          // 函数名称: void WritePara()
  108          // 函数功能: 写入数据到内存中
  109          // 入口参数: @无
  110          // 函数返回: 无
  111          // 当前版本: VER1.0
  112          // 修改日期: 2023.5.5
  113          // 当前作者:
  114          // 其他备注: 
  115          //========================================================================
  116          void WritePara()
  117          {
  118   1              EA = 0;
  119   1          EEPROM_SectorErase(0);
  120   1          EEPROM_SectorErase(512);
  121   1              SysRunState.stParam.ParaCheckSum = CheckSum((BYTE *)&SysRunState.stParam,sizeof(LP_PARAM)-2);//add by ke
             -vin at 20150417
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 3   

  122   1              if (!EEPROM_write(0, (u8 *)&SysRunState.stParam, sizeof(LP_PARAM)))
  123   1          {
  124   2              Error();
  125   2          }   
  126   1              EA = 1;
  127   1      }
  128          
  129          
  130          //向上位机发送命令
  131          void SendData(uint8_t cmd, uint8_t *cdata, uint16_t length)
  132          {
  133   1              uint16_t crc;
  134   1      
  135   1              s_Head.cmd = cmd;
  136   1              s_Head.length = length;
  137   1              memcpy(snedbuf,(uint8_t*)&s_Head,sizeof(STU_CMD));
  138   1              if(length>0)
  139   1              {
  140   2                      memcpy(&snedbuf[sizeof(STU_CMD)],cdata,length);
  141   2              }
  142   1              crc = CRC16(snedbuf,length+sizeof(STU_CMD));
  143   1              memcpy(&snedbuf[length+sizeof(STU_CMD)],(uint8_t*)&crc,2);
  144   1              snedbuf[length+sizeof(STU_CMD)+2] = 0x16;
  145   1              
  146   1              uart485_send(snedbuf,(u8)(length+7));
  147   1      }
  148          
  149          /*******************************************************************************
  150          功能：获取上位机指定的模式
  151          输入：无
  152          输出：工作模式
  153          *******************************************************************************/
  154          int GetWorkMode(void)
  155          {
  156   1        return 3;
  157   1      }
  158          
  159          
  160          
  161          /*******************************************************************************
  162          功能：命令分析与执行
  163          输入：U32 id:指令ID号
  164                unsigned char dlc: 数据长度
  165                unsigned char *cdata:数据指针
  166          输出：无
  167          *******************************************************************************/
  168          STU_CMD gs_CMD={0};
  169          void DataPro(uint8_t *cdata, uint16_t length)
  170          {  
  171   1              uint16_t i;
  172   1          uint16_t crcRev;
  173   1          uint16_t crcOut;
  174   1              //STU_CMD *pCmd = NULL;
  175   1              
  176   1              for(i=0;i<length; i++)
  177   1              {
  178   2                      if(cdata[i] == 0x68)
  179   2                      {
  180   3                              //pCmd = (STU_CMD *)&cdata[i];
  181   3                              memcpy(&gs_CMD,&cdata[i],sizeof(STU_CMD));
  182   3                              if((gs_CMD.length > length-7)||(cdata[i+6+gs_CMD.length] != 0x16))
  183   3                              {
  184   4                                        continue;
  185   4                              }
  186   3                              crcRev = cdata[i+4+gs_CMD.length] + cdata[i+5+gs_CMD.length]*256;
  187   3                              crcOut = CRC16(&cdata[i],gs_CMD.length+4);
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 4   

  188   3                              if(crcRev != crcOut)
  189   3                              {
  190   4                                        continue;
  191   4                              }
  192   3                              
  193   3                              SysRunState.NoUartTime = 0;
  194   3      
  195   3                              switch(gs_CMD.cmd)
  196   3                              {
  197   4                                      case 'C'://联络命令
  198   4                                              ACK_CMD_C((uint8_t*)&SysRunState.stParam.SensorType);
  199   4                                      break;
  200   4      
  201   4                                      case 'V'://读计数
  202   4                                              ACK_CMD_V();
  203   4                                      break;
  204   4                                      
  205   4                                      case 'E'://读工作状态
  206   4                                              ACK_CMD_E();
  207   4                                      break;
  208   4      
  209   4                                      case 'R'://读参数
  210   4                                              ACK_CMD_R();
  211   4                                      break;
  212   4      
  213   4                                      case 'W'://写参数
  214   4                                       if(length-i-5 > sizeof(SYS_PRAM))
  215   4                                       {
  216   5                                              ACK_CMD_W(&cdata[i+4]);
  217   5                                       }
  218   4                                      break;
  219   4      
  220   4                                      case 'S'://存参数
  221   4                                              ACK_CMD_S();
  222   4                                      break;
  223   4      
  224   4                                      case 1://清除累计剂量
  225   4                                              ACK_CMD_ClearDoseSum();
  226   4                                      break;
  227   4                                      
  228   4                                      case 2://清除最大剂量率
  229   4                                              ACK_CMD_ClearMaxDoseRate();
  230   4                                      break;
  231   4                                      
  232   4                                      case 3://探测器自检
  233   4                                              ACK_CMD_SelfCheck();
  234   4                                      break;
  235   4                                      
  236   4                                      case 4://开关探测器
  237   4                                              ACK_CMD_SensorONOFF(cdata[i+4]);
  238   4                                      break;
  239   4                                      
  240   4                                      case 5://电池电量查询
  241   4                                              ACK_CMD_Bat();
  242   4                                      break;
  243   4      
  244   4                                      case 6://报警确认
  245   4                                              ACK_CMD_SureAlarm();
  246   4                                      break;
  247   4      
  248   4                      case 7: // 量程切换
  249   4                          ACK_CMD_GmSw(cdata[i+4]);
  250   4                      break;
  251   4      
  252   4                                      case 'B'://写报警参数
  253   4                                              ACK_CMD_B(&cdata[i+4]);
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 5   

  254   4                                      break;
  255   4      
  256   4                                      case 'F'://读报警参数
  257   4                                              ACK_CMD_F();
  258   4                                      break;
  259   4                                      
  260   4                                      case 0x28://远程升级
  261   4                                              //asm(" mov &0xFFBE, PC;"); //跳转到升级代码
  262   4                                        break;
  263   4                              default:
  264   4                                break;
  265   4                              }
  266   3                              i += (gs_CMD.length+4);
  267   3                      }
  268   2              }
  269   1      }
  270          
  271          /*******************************************************************************
  272          功能：联络命令响应
  273          输入：unsigned char SensorType:传感器类型
  274          输出：无
  275          *******************************************************************************/
  276          void ACK_CMD_C(u8 *SensorType)
  277          {
  278   1              SendData('C',SensorType,6);
  279   1              SENSOR_POWER_ON();
  280   1              LOWCHANNEL_POWER_ON();
  281   1      }
  282          
  283          
  284          
  285          /*******************************************************************************
  286          功能：读命令(R)响应
  287          输入：无
  288          输出：无
  289          *******************************************************************************/
  290          void ACK_CMD_R(void)
  291          {
  292   1          SYS_PRAM red;
  293   1          red.Hv = FloatToSmall(SysRunState.stParam.s_SysParam.Hv);
  294   1          red.Cr = FloatToSmall(SysRunState.stParam.s_SysParam.Cr);
  295   1          red.Ct = FloatToSmall(SysRunState.stParam.s_SysParam.Ct);
  296   1          red.Hd = FloatToSmall(SysRunState.stParam.s_SysParam.Hd);
  297   1          red.Hn = WordToSmall (SysRunState.stParam.s_SysParam.Hn);
  298   1          
  299   1          red.PingHuaShiJian = FloatToSmall(SysRunState.stParam.s_SysParam.PingHuaShiJian);
  300   1          
  301   1          red.S1 = FloatToSmall(SysRunState.stParam.s_SysParam.S1);
  302   1          red.S2 = FloatToSmall(SysRunState.stParam.s_SysParam.S2);
  303   1          red.S3 = FloatToSmall(SysRunState.stParam.s_SysParam.S3);
  304   1          
  305   1          red.Z1 = FloatToSmall(SysRunState.stParam.s_SysParam.Z1);
  306   1          red.Z2 = FloatToSmall(SysRunState.stParam.s_SysParam.Z2);
  307   1          red.Z3 = FloatToSmall(SysRunState.stParam.s_SysParam.Z3);
  308   1          red.Z4 = FloatToSmall(SysRunState.stParam.s_SysParam.Z4);
  309   1          
  310   1          red.DiYaCanshuA = FloatToSmall(SysRunState.stParam.s_SysParam.DiYaCanshuA);
  311   1          red.DiYaCanshuB = FloatToSmall(SysRunState.stParam.s_SysParam.DiYaCanshuB);
  312   1          red.DiYaCanshuC = FloatToSmall(SysRunState.stParam.s_SysParam.DiYaCanshuC);
  313   1          
  314   1          red.GaoYaCanshuA = FloatToSmall(SysRunState.stParam.s_SysParam.GaoYaCanshuA);
  315   1          red.GaoYaCanshuB = FloatToSmall(SysRunState.stParam.s_SysParam.GaoYaCanshuB);
  316   1          red.GaoYaCanshuC = FloatToSmall(SysRunState.stParam.s_SysParam.GaoYaCanshuC);
  317   1         
  318   1          SendData('R',(uint8_t*)&red,sizeof(SYS_PRAM));
  319   1      }
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 6   

  320          
  321          
  322          /*******************************************************************************
  323          功能：写参数命令(W)响应
  324          输入：unsigned char *cdata:参数
  325          输出：无
  326          *******************************************************************************/
  327          void ACK_CMD_W(unsigned char *cdata)
  328          {
  329   1          SYS_PRAM wcm;
  330   1          memcpy(&wcm,cdata,sizeof(SYS_PRAM));
  331   1              
  332   1          SysRunState.stParam.s_SysParam.Hv = FloatToSmall(wcm.Hv);
  333   1          SysRunState.stParam.s_SysParam.Cr = FloatToSmall(wcm.Cr);
  334   1          SysRunState.stParam.s_SysParam.Ct = FloatToSmall(wcm.Ct);
  335   1          SysRunState.stParam.s_SysParam.Hd = FloatToSmall(wcm.Hd);
  336   1          SysRunState.stParam.s_SysParam.Hn = wcm.Hn;
  337   1          
  338   1          SysRunState.stParam.s_SysParam.S1 = FloatToSmall(wcm.S1);
  339   1          SysRunState.stParam.s_SysParam.S2 = FloatToSmall(wcm.S2);
  340   1          SysRunState.stParam.s_SysParam.S3 = FloatToSmall(wcm.S3);
  341   1          
  342   1          SysRunState.stParam.s_SysParam.Z1 = FloatToSmall(wcm.Z1);
  343   1          SysRunState.stParam.s_SysParam.Z2 = FloatToSmall(wcm.Z2);
  344   1          SysRunState.stParam.s_SysParam.Z3 = FloatToSmall(wcm.Z3);
  345   1          SysRunState.stParam.s_SysParam.Z4 = FloatToSmall(wcm.Z4);
  346   1          
  347   1          SysRunState.stParam.s_SysParam.PingHuaShiJian = FloatToSmall(wcm.PingHuaShiJian);
  348   1      
  349   1          SysRunState.stParam.s_SysParam.DiYaCanshuA = FloatToSmall(wcm.DiYaCanshuA);
  350   1          SysRunState.stParam.s_SysParam.DiYaCanshuB = FloatToSmall(wcm.DiYaCanshuB);
  351   1          SysRunState.stParam.s_SysParam.DiYaCanshuC = FloatToSmall(wcm.DiYaCanshuC);
  352   1      
  353   1          SysRunState.stParam.s_SysParam.GaoYaCanshuA = FloatToSmall(wcm.GaoYaCanshuA);
  354   1          SysRunState.stParam.s_SysParam.GaoYaCanshuB = FloatToSmall(wcm.GaoYaCanshuB);
  355   1          SysRunState.stParam.s_SysParam.GaoYaCanshuC = FloatToSmall(wcm.GaoYaCanshuC);
  356   1      
  357   1              SendData('W',NULL,0);
  358   1              SaveParam();
  359   1      }
  360          
  361          
  362          
  363          /*******************************************************************************
  364          功能：存参数命令(S)响应
  365          输入：unsigned char SensorType:传感器类型
  366          输出：无
  367          *******************************************************************************/
  368          void ACK_CMD_S(void)
  369          {
  370   1              SendData('S',NULL,0);
  371   1              SaveParam();
  372   1              MCP4725_OutVol(MCP4725_S1_ADDR,2500-(WORD)SysRunState.stParam.s_SysParam.Z1);//alphy 阈值
  373   1              //MCP4725_OutVol(IIC_ADDR_HIGH,(unsigned int)SysRunState.stParam.s_SysParam.Z2);//beta阈值
  374   1      }
  375          
  376          
  377          
  378          /*******************************************************************************
  379          功能：读计数命令(V)响应
  380          输入：unsigned char SensorType:传感器类型
  381          输出：无
  382          *******************************************************************************/
  383          
  384          void ACK_CMD_V(void)
  385          { 
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 7   

  386   1          STU_DOSERATE gs_Dose;
  387   1          gs_Dose.C1 = FloatToSmall(SysRunState.s_DoseMSG.C1);
  388   1          gs_Dose.C2 = FloatToSmall(SysRunState.s_DoseMSG.C2);
  389   1          
  390   1          gs_Dose.Dose = FloatToSmall(SysRunState.s_DoseMSG.Dose);
  391   1          gs_Dose.DoseRate = FloatToSmall(SysRunState.s_DoseMSG.DoseRate);
  392   1          gs_Dose.DRSt = SysRunState.s_DoseMSG.DRSt;
  393   1          gs_Dose.MaxDoseRate = FloatToSmall(SysRunState.s_DoseMSG.MaxDoseRate);
  394   1          
  395   1          gs_Dose.P1 = FloatToSmall(SysRunState.s_DoseMSG.P1);
  396   1          gs_Dose.P2 = FloatToSmall(SysRunState.s_DoseMSG.P2);
  397   1          
  398   1              SendData('V',(uint8_t*)&gs_Dose,sizeof(STU_DOSERATE));
  399   1      }
  400          
  401          
  402          /*******************************************************************************
  403          功能：写报警参数命令(WF)响应
  404          输入：unsigned char *cdata
  405          输出：无
  406          *******************************************************************************/
  407          void ACK_CMD_B(u8 *cdata)
  408          {
  409   1          SYS_ALARM wal;   
  410   1          memcpy(&wal,cdata,sizeof(SYS_ALARM));
  411   1          SysRunState.stParam.s_Alarm.DoseAlarm = FloatToSmall(wal.DoseAlarm);
  412   1          SysRunState.stParam.s_Alarm.DosePreAlarm = FloatToSmall(wal.DosePreAlarm);
  413   1          SysRunState.stParam.s_Alarm.DoseRateAlarm = FloatToSmall(wal.DoseRateAlarm);
  414   1          SysRunState.stParam.s_Alarm.DoseRatePreAlarm = FloatToSmall(wal.DoseRatePreAlarm);
  415   1          
  416   1              SendData('B',NULL,0);
  417   1              SaveParam();
  418   1      } 
  419          
  420          
  421          /*******************************************************************************
  422          功能：读报警参数命令(F)响应
  423          输入：无
  424          输出：无
  425          *******************************************************************************/
  426          void ACK_CMD_F(void)
  427          {
  428   1          SYS_ALARM ral;
  429   1          ral.DoseAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DoseAlarm);
  430   1          ral.DosePreAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DosePreAlarm);
  431   1          ral.DoseRateAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DoseRateAlarm);
  432   1          ral.DoseRatePreAlarm = FloatToSmall(SysRunState.stParam.s_Alarm.DoseRatePreAlarm);
  433   1      
  434   1              SendData('F',(uint8_t*)&ral,sizeof(SYS_ALARM));
  435   1      } 
  436          
  437          /*******************************************************************************
  438          功能：工作状态
  439          输入：
  440          输出：
  441          *******************************************************************************/
  442          void ACK_CMD_E(void)
  443          {
  444   1              uint16_t state = 3;
  445   1              
  446   1              SendData('E',(uint8_t*)&state,2);
  447   1      }
  448          
  449          /*******************************************************************************
  450          功能：清除累计剂量(1)响应
  451          输入：
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 8   

  452          输出：
  453          *******************************************************************************/
  454          void ACK_CMD_ClearDoseSum(void)
  455          {
  456   1              SysRunState.s_DoseMSG.Dose = 0;
  457   1              SendData(1,NULL,0);
  458   1      }
  459          
  460          
  461          
  462          /*******************************************************************************
  463          功能：清除最大剂量率(2)响应
  464          输入：
  465          输出：
  466          *******************************************************************************/
  467          void ACK_CMD_ClearMaxDoseRate(void)
  468          {
  469   1              SysRunState.s_DoseMSG.MaxDoseRate = 0;
  470   1              SendData(2,NULL,0);
  471   1      }
  472          
  473          /*******************************************************************************
  474          功能：探测器自检(3)响应
  475          输入：
  476          输出：
  477          *******************************************************************************/
  478          void ACK_CMD_SelfCheck(void)
  479          {
  480   1              //自检
  481   1              uint16_t result=1;
  482   1              SENSOR_POWER_ON();
  483   1              LOWCHANNEL_POWER_ON();
  484   1              if(/*(Get_Low_Counter() < LOW_DIBENDI)||*/(Get_Low_Counter() > LOW_GAOBENDI)
  485   1                 /*||(Get_High_Counter() < HIGH_DIBENDI)*/||(Get_High_Counter() > HIGH_GAOBENDI))
  486   1              {
  487   2                      result = 0;
  488   2              }
  489   1              SendData(3,(uint8_t*)&result,2);
  490   1      }
  491          
  492          /*******************************************************************************
  493          功能：开关探测器(4)响应
  494          输入：
  495          输出：
  496          *******************************************************************************/
  497          void ACK_CMD_SensorONOFF(uint16_t state)
  498          {
  499   1              SendData(4,NULL,0);
  500   1              //开关探测器
  501   1              if(state == 1)
  502   1              {
  503   2                      SENSOR_POWER_ON();
  504   2                      LOWCHANNEL_POWER_ON();
  505   2                      SensorInit();
  506   2              }
  507   1              else
  508   1              {
  509   2                      //DevSleep();
  510   2                      SysRunState.NoUartTime = POWER_OFF_TIME+1;
  511   2              }
  512   1      }
  513          
  514          /*******************************************************************************
  515          功能：电池电量查询(5)响应
  516          输入：
  517          输出：
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 9   

  518          *******************************************************************************/
  519          STU_BATTERY s_Bat={0};
  520          void ACK_CMD_Bat(void)
  521          {
  522   1          STU_BATTERY bat;
  523   1          
  524   1              DeviceGetBatAlarm(&s_Bat);
  525   1          
  526   1              bat.Voltage = WordToSmall(s_Bat.Voltage);
  527   1          bat.Status = s_Bat.Status;
  528   1          bat.batPercent = s_Bat.batPercent; 
  529   1          
  530   1              SendData(5,(uint8_t*)&bat,sizeof(STU_BATTERY));
  531   1      }
  532          
  533          /*******************************************************************************
  534          功能：报警确认(6)响应
  535          输入：
  536          输出：
  537          *******************************************************************************/
  538          void ACK_CMD_SureAlarm(void)
  539          {
  540   1              //报警确认，关闭相应指示灯
  541   1              
  542   1              SendData(6,NULL,0);
  543   1      }
  544          
  545          
  546          /*******************************************************************************
  547          功能：切换高低量程
  548          输入：
  549          输出：
  550          *******************************************************************************/
  551          void ACK_CMD_GmSw(unsigned char Gm)
  552          {
  553   1              if (Gm == 1)
  554   1          {
  555   2              GM_HIGH;
  556   2              }
  557   1          else
  558   1          {
  559   2              GM_LOW;
  560   2          }
  561   1          
  562   1              SendData(7,NULL,0);
  563   1      }
  564          
  565          /*
  566          函数名称:CheckSum
  567          函数描述:校验和函数
  568          输    入:数据、长度
  569          输    出:校验结果
  570          作    者:张红丽
  571          日    期:2012.9.10
  572          
  573          */
  574          //========================================================================
  575          // 函数名称: WORD CheckSum(BYTE *buf, WORD len)
  576          // 函数功能: 校验和函数
  577          // 入口参数: @*buf：数据；@len：长度
  578          // 函数返回: 校验结果
  579          // 当前版本: VER1.0
  580          // 修改日期: 2023.5.5
  581          // 当前作者:
  582          // 其他备注: 
  583          //========================================================================
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  11:31:21  PAGE 10  

  584          WORD CheckSum(BYTE *buf, WORD len)
  585          {
  586   1          WORD dwSum = 0;
  587   1          WORD i;
  588   1      
  589   1          for (i = 0; i < len; i++)
  590   1          {
  591   2              dwSum += buf[i];
  592   2          }
  593   1          return dwSum;
  594   1      }
  595              
  596          void SaveParam()
  597          {
  598   1          EA = 0;//禁止中断
  599   1          WritePara();
  600   1          EA = 1;//允许中断
  601   1      }
  602          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2329     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       538     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
