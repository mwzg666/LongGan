C251 COMPILER V5.60.0,  main                                                               23/05/23  17:17:47  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\obj\main.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE User\main.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\User;.\Hard
                    -ware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\System;
                    -.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardware\Queue) PRI
                    -NT(.\obj\main.lst) OBJECT(.\obj\main.obj) 

stmt  level    source

    1          #include "Sensor.h"
    2          #include "mcp4725.h"
    3          #include "system.h"
    4          #include "main.h"
    5          #include "CMD.h"
    6          #include "uart.h"
    7          #include "i2c.h"
    8          #include "flash.h"
    9          #include "CalcDoseRate.h"
   10          #include "DoseRate.h"
   11          
   12          LP_SYSTEM_STTAE SysRunState={0};
   13          
   14          extern void Adc_Init();
   15          extern uint16_t DeviceGetBatVal(void);
   16          extern void DeviceGetBatAlarm(STU_BATTERY *bat);
   17          extern STU_BATTERY s_Bat;
   18          
   19          //unsigned int ADC16Result = 0; 
   20          
   21          //========================================================================
   22          // 函数名称: void InitParam()
   23          // 函数功能: 初始化各个参数
   24          // 入口参数: @无
   25          // 函数返回: 无
   26          // 当前版本: VER1.0
   27          // 修改日期: 2023.5.5
   28          // 当前作者:
   29          // 其他备注: 
   30          //========================================================================
   31          
   32          void InitParam()
   33          {
   34   1              memset((void*)&SysRunState.stParam,0,sizeof(LP_PARAM));
   35   1              SysRunState.stParam.SensorType = SENSOR_LONGPOLE;          //探头类型
   36   1              SysRunState.stParam.s_SysParam.Hv = 800;                   //高压值
   37   1              SysRunState.stParam.s_SysParam.Z1 = 2500-600;              //甄别器阈值1
   38   1              SysRunState.stParam.s_SysParam.Ct = 1000;                  //计数时间
   39   1              SysRunState.stParam.s_SysParam.Hd = 3;                     //高压误差
   40   1              SysRunState.stParam.s_SysParam.Z2 = 1100;                  //甄别器阈值2
   41   1              SysRunState.stParam.s_SysParam.Hn = 0x5a;
   42   1      
   43   1              SysRunState.stParam.s_SysParam.DiYaCanshuA = 0.63;         //低量程通道校准因子
   44   1              SysRunState.stParam.s_SysParam.DiYaCanshuB = 0.00019;      //低量程通道校准因子
   45   1              SysRunState.stParam.s_SysParam.DiYaCanshuC = 0.83;         //1;低量程通道校准因子
   46   1              SysRunState.stParam.s_SysParam.GaoYaCanshuA = 33.6;        //高量程通道校准因子
   47   1              SysRunState.stParam.s_SysParam.GaoYaCanshuB = 0.000023;    //高量程通道校准因子
   48   1              SysRunState.stParam.s_SysParam.GaoYaCanshuC = 0.83;        //高量程通道校准因子
   49   1      
   50   1          //SysRunState.stParam.s_SysParam.BCanshuA = 0.63;            //β校准因子A
   51   1              //SysRunState.stParam.s_SysParam.BCanshuB = 0.00019;         //β校准因子B
   52   1              //SysRunState.stParam.s_SysParam.BCanshuC = 0.83;            //β校准因子C
   53   1              
   54   1              SysRunState.stParam.s_Alarm.DosePreAlarm = 300;            //300uSv
   55   1              SysRunState.stParam.s_Alarm.DoseAlarm = 400;               //400uSv
   56   1              SysRunState.stParam.s_Alarm.DoseRatePreAlarm = 300;        //300uSv/h
C251 COMPILER V5.60.0,  main                                                               23/05/23  17:17:47  PAGE 2   

   57   1              SysRunState.stParam.s_Alarm.DoseRateAlarm = 400;           //400uSv/h
   58   1      
   59   1              WritePara();
   60   1      }
   61          
   62          void DevInit(void)
   63          {
   64   1          BLUE_PWOFF();
   65   1          GDoseSeg = LOW_SEG;
   66   1              //GM_LOW;
   67   1              BLUE_CFG_MODE();
   68   1              BLUE_WAKEUP();
   69   1      }
   70          void sysSleep(void)
   71          {
   72   1              SysRunState.isSleep = 1;
   73   1              //LPM3;
   74   1      }
   75          
   76          void DevSleep(void)
   77          {
   78   1              SENSOR_POWER_OFF();                     //暂时先不关高压
   79   1              BLUE_CFG_MODE();
   80   1              delay_ms(2500);
   81   1              uartble_send("AT+CLEARADDR\r\n",14);    //清除远端蓝牙地址
   82   1              delay_ms(500);
   83   1              BLUE_WORK_MODE();
   84   1              BLUE_SLEEP();
   85   1              TR0 = 0;
   86   1              sysSleep();
   87   1              SensorMeasureBegin();//开始测量 
   88   1              TR0 = 1;
   89   1              SENSOR_POWER_ON();
   90   1      }
   91          
   92          
   93          void BtInit()
   94          {
   95   1          BLUE_WORK_MODE();
   96   1          BLUE_SLEEP();
   97   1          BLUE_PWOFF();
   98   1          delay_ms(500);
   99   1          
  100   1          BLUE_PWON();
  101   1          BLUE_WAKEUP();
  102   1          BLUE_CFG_MODE();
  103   1      
  104   1                  
  105   1              uartble_send("AT+ROLE=0\r\n",11);//从模式
  106   1              delay_ms(500);
  107   1              uartble_send("AT+LOWPOWER=1\r\n",15);//允许低功耗
  108   1              delay_ms(500);
  109   1              uartble_send("AT+TXPOWER=7\r\n",14);//发射功率0~7
  110   1              delay_ms(500);
  111   1          
  112   1              uartble_send("AT+CLEARADDR\r\n",14);//清除远端蓝牙地址
  113   1              delay_ms(500);
  114   1              uartble_send("AT+AUTH=1\r\n",11);//设置鉴权
  115   1              delay_ms(500);
  116   1              uartble_send("AT+BIND=1\r\n",11);//设置绑定地址
  117   1              delay_ms(500);
  118   1          
  119   1              /*MSP430XX_UART_Send("AT+RADDR?\r\n",11);//
  120   1              delay_ms(500);
  121   1              MSP430XX_UART_Send("AT+BLECONNPARAM?\r\n",18);
  122   1              delay_ms(1000);
C251 COMPILER V5.60.0,  main                                                               23/05/23  17:17:47  PAGE 3   

  123   1              MSP430XX_UART_Send("AT+DFU\r\n",8);
  124   1              delay_ms(1000);*/
  125   1      
  126   1          
  127   1          BLUE_WORK_MODE();
  128   1      }
  129          
  130          
  131          //========================================================================
  132          // 函数名称: void delay_ms(WORD ms)  
  133          // 函数功能: 毫秒延时函数
  134          // 入口参数: @WORD ms：延时多少毫秒
  135          // 函数返回: 无
  136          // 当前版本: VER1.0
  137          // 修改日期: 2023.5.5
  138          // 当前作者:
  139          // 其他备注: 
  140          //========================================================================
  141          void delay_ms(WORD ms)              
  142          {
  143   1          WORD t = 1000;
  144   1          while(ms--)
  145   1          {
  146   2              for (t=0;t<1000;t++) ;
  147   2          }
  148   1      }
  149          
  150          
  151          void delay_us(BYTE us)
  152          {
  153   1          while(us--)
  154   1          {
  155   2              ;
  156   2          }
  157   1      }
  158          
  159          //========================================================================
  160          // 函数名称: void IoInit()
  161          // 函数功能: 单片机I/O口初始化
  162          // 入口参数: @无
  163          // 函数返回: 无
  164          // 当前版本: VER1.0
  165          // 修改日期: 2023.5.5
  166          // 当前作者:
  167          // 其他备注: 
  168          //========================================================================
  169          void IoInit()
  170          {
  171   1          EAXFR = 1;
  172   1          WTST = 0;                       //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
  173   1      
  174   1          P0M1 = 0x50;   P0M0 = 0x00;     //设置为准双向口
  175   1          P1M1 = 0x00;   P1M0 = 0x00;     //设置为准双向口
  176   1          P2M1 = 0x00;   P2M0 = 0x00;     //设置为准双向口
  177   1          P3M1 = 0x00;   P3M0 = 0x00;     //P3.3设置为推挽输出
  178   1          P4M1 = 0x00;   P4M0 = 0x00;     //设置为准双向口
  179   1          P5M1 = 0x00;   P5M0 = 0x00;     //设置为准双向口
  180   1          P6M1 = 0x00;   P6M0 = 0x00;     //设置为准双向口
  181   1          P7M1 = 0x00;   P7M0 = 0x00;     //设置为准双向口
  182   1      }
  183          
  184          //========================================================================
  185          // 函数名称: void TimerTask()
  186          // 函数功能: 定时任务，通过定时器0定时10ms来设置相关任务
  187          // 入口参数: @无
  188          // 函数返回: 无
C251 COMPILER V5.60.0,  main                                                               23/05/23  17:17:47  PAGE 4   

  189          // 当前版本: VER1.0
  190          // 修改日期: 2023.5.5
  191          // 当前作者:
  192          // 其他备注: 
  193          //========================================================================
  194          void TimerTask()
  195          {
  196   1          u16 delta = 0;
  197   1          static u16 Time1s = 0;
  198   1          if(Timer0Cnt)
  199   1          {
  200   2              delta = Timer0Cnt * 10;
  201   2              Timer0Cnt = 0;
  202   2              if(RX1_Cnt>0)
  203   2              {
  204   3                  Rx1_Timer += delta;
  205   3              }
  206   2              if(RX3_Cnt>0)
  207   2              {
  208   3                  Rx3_Timer += delta;
  209   3              }
  210   2              Time1s += delta;
  211   2              if(Time1s >= 1000)                      //100*10=1000ms
  212   2              {
  213   3                  Time1s = 0;
  214   3                  SysRunState.isCanReadSensor = 1;
  215   3      
  216   3                  Pluse3Cnt = 100;//((u32)LowOverFlowFlag3*65536)<<8 | (u32)(T3H*256+T3L) ;
  217   3                  T3R = 0; 
  218   3                  T3H = 0;
  219   3                  T3L = 0;
  220   3                  T3R = 1;            
  221   3      
  222   3                  Pluse3PortCnt = 0;
  223   3                  LowOverFlowFlag3 = 0;
  224   3      
  225   3                  Pluse4Cnt = 200;//((u32)LowOverFlowFlag4*65536)<<8 | (u32)(T4H*256+T4L) ;
  226   3                  T4R = 0; 
  227   3                  T4H = 0;
  228   3                  T4L = 0;
  229   3                  T4R = 1;            
  230   3      
  231   3                  Pluse4PortCnt = 0;
  232   3                  LowOverFlowFlag4 = 0;
  233   3              }
  234   2          }
  235   1          if(SysRunState.NoUartTime > POWER_OFF_TIME)
  236   1          {
  237   2              DevSleep();
  238   2          }
  239   1          else
  240   1          {
  241   2              sysSleep();
  242   2          }
  243   1      }
  244          
  245          //========================================================================
  246          // 函数名称: void Rs485Hnd()
  247          // 函数功能: 通过RS485与上位机握手
  248          // 入口参数: @无
  249          // 函数返回: 无
  250          // 当前版本: VER1.0
  251          // 修改日期: 2023.5.5
  252          // 当前作者:
  253          // 其他备注: 
  254          //========================================================================
C251 COMPILER V5.60.0,  main                                                               23/05/23  17:17:47  PAGE 5   

  255          void Rs485Hnd()
  256          {
  257   1          if(Rx3_Timer > 20)                  //串口超时20ms
  258   1          {
  259   2              Rx3_Timer = 0;
  260   2              DataPro(RX3_Buffer,RX3_Cnt);
  261   2              ClearRs485Buf();
  262   2          }
  263   1      }
  264          
  265          
  266          void Error()
  267          {
  268   1          while(1)
  269   1          {
  270   2              
  271   2              //RUN_LED(1);
  272   2              delay_ms(200);
  273   2              //RUN_LED(0);
  274   2              delay_ms(200);
  275   2          }
  276   1      }
  277          
  278          
  279          int main(void)
  280          {    
  281   1          SysInit();
  282   1      
  283   1          IoInit();
  284   1          //I2C_Init();
  285   1          Adc_Init();
  286   1              DevInit();
  287   1          
  288   1              delay_ms(200);
  289   1              
  290   1              Uart1_Init();
  291   1          Uart3_Init();
  292   1          ClearRs485Buf();
  293   1          ClearBleBuf();
  294   1          SensorInit();    
  295   1              Timer0_Init();
  296   1              Timer3_Init();
  297   1              Timer4_Init();
  298   1          
  299   1          delay_ms(1000);
  300   1              GetPara(&SysRunState.stParam);
  301   1          
  302   1              EA = 1;
  303   1          
  304   1              //开机先检测一次电池电量
  305   1          DeviceGetBatVal();
  306   1      
  307   1          BtInit();
  308   1          DeviceGetBatVal();
  309   1      
  310   1              BLUE_SLEEP();
  311   1              DeviceGetBatAlarm(&s_Bat);//开机先检测一次电池电量
  312   1              SensorMeasureBegin();//开始测量 
  313   1              InitArr();
  314   1          
  315   1          MCP4725_OutVol(MCP4725_S1_ADDR,2500-(WORD)SysRunState.stParam.s_SysParam.Z1);
  316   1              
  317   1          while(1)
  318   1          {              
  319   2              if(SysRunState.isCanReadSensor == 1)
  320   2              {
C251 COMPILER V5.60.0,  main                                                               23/05/23  17:17:47  PAGE 6   

  321   3                  CaptureSensorPluseCounter(); //捕获当前测量结果
  322   3                  SensorMeasureBegin();         //开始测量 
  323   3                  SysRunState.isCanReadSensor = 0;
  324   3              }
  325   2      
  326   2              if((SysRunState.NoUartTime >= 90*100)&&(SysRunState.NoUartTime < 93*100))
  327   2              {
  328   3                  //长时间无通信数据尝试复位蓝牙模块
  329   3                  BtInit();
  330   3                  //revFlag = 0;
  331   3                  RX1_Cnt = 0;
  332   3                  SensorMeasureBegin();//开始测量 
  333   3                  SysRunState.NoUartTime = 93*100;
  334   3              }
  335   2      
  336   2              Rs485Hnd();
  337   2              TimerTask();
  338   2              
  339   2          }
  340   1      }
  341          
  342          
  343          
  344          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1004     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       236     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       319     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
