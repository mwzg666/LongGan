C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\obj\CMD.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Cmd\CMD.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\User
                    -;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardware\
                    -System;.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardware\Que
                    -ue) PRINT(.\obj\CMD.lst) OBJECT(.\obj\CMD.obj) 

stmt  level    source

    1          #include <stdlib.h>
    2          #include "CMD.h"
    3          #include "sensor.h"
    4          #include "mcp4725.h"
    5          #include "flash.h"
    6          #include "uart.h"
    7          #include "mwpro.h"
    8          #include "CalcCPS.h"
    9          #include "Mcp4725.h"
   10          #include "crc.h"
   11          
   12          #define FRAM_DELAY delay_ms(100)
   13          
   14          STU_CMD s_Head={0x68};
   15          uint8_t snedbuf[100];
   16          
   17          extern void DeviceGetBatAlarm(STU_BATTERY *bat);
   18          extern void DevSleep(void);
   19          
   20          
   21          //========================================================================
   22          // 函数名称: WORD WordToSmall(WORD dat)
   23          // 函数功能: 将WORD的数据转换为小端模式
   24          // 入口参数: @WORD dat：要转换的数据
   25          // 函数返回: 返回类型为WORD的小端模式数据
   26          // 当前版本: VER1.0
   27          // 修改日期: 2023.5.5
   28          // 当前作者:
   29          // 其他备注: 
   30          //========================================================================
   31          
   32          WORD WordToSmall(WORD dat)
   33          {
   34   1              BYTE buf[2];
   35   1          BYTE t;
   36   1          WORD ret;
   37   1          
   38   1          memcpy(buf, &dat, 2);
   39   1              t = buf[1];
   40   1              buf[0] = buf[1];
   41   1              buf[1] = t;
   42   1              
   43   1          memcpy(&ret, buf, 2);
   44   1          return ret;
   45   1      }
   46          
   47          float FloatToSmall(float dat)
   48          {
   49   1              BYTE buf[4];
   50   1          BYTE t;
   51   1          float ret;
   52   1          
   53   1          memcpy(buf, &dat, 4);
   54   1              t = buf[3];
   55   1              buf[3] = buf[0];
   56   1              buf[0] = t;
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 2   

   57   1              t = buf[2];
   58   1              buf[2] = buf[1];
   59   1              buf[1] = t;
   60   1      
   61   1          memcpy(&ret, buf, 4);
   62   1          return ret;
   63   1      }
   64          
   65          DWORD DwordToSmall(DWORD dat)
   66          {
   67   1              BYTE buf[4];
   68   1          BYTE t;
   69   1          DWORD ret;
   70   1          
   71   1          memcpy(buf, &dat, 4);
   72   1              t = buf[3];
   73   1              buf[3] = buf[0];
   74   1              buf[0] = t;
   75   1              t = buf[2];
   76   1              buf[2] = buf[1];
   77   1              buf[1] = t;
   78   1      
   79   1          memcpy(&ret, buf, 4);
   80   1          return ret;
   81   1      }
   82          
   83          
   84          //========================================================================
   85          // 函数名称: void GetPara(LP_PARAM *me)
   86          // 函数功能: 从FLASH中读取参数，包括"控制参数"和"报警参数"
   87          // 入口参数: @me：数据
   88          // 函数返回: 无
   89          // 当前版本: VER1.0
   90          // 修改日期: 2023.5.5
   91          // 当前作者:
   92          // 其他备注: 
   93          //========================================================================
   94          void GetPara(LP_PARAM *me)
   95          { 
   96   1              EEPROM_read(0,(u8 *)me,sizeof(LP_PARAM));
   97   1          if ( SysRunState.stParam.ParaCheckSum !=  CheckSum((BYTE *)&SysRunState.stParam,sizeof(LP_PARAM)-2))
   98   1              {
   99   2                      InitParam();
  100   2              }
  101   1          SysRunState.stParam.VerSion1 = VERSION1;
  102   1              SysRunState.stParam.VerSion2 = VERSION2;
  103   1              SysRunState.stParam.VerSion3 = VERSION3;
  104   1      }
  105          
  106          //========================================================================
  107          // 函数名称: void WritePara()
  108          // 函数功能: 写入数据到内存中
  109          // 入口参数: @无
  110          // 函数返回: 无
  111          // 当前版本: VER1.0
  112          // 修改日期: 2023.5.5
  113          // 当前作者:
  114          // 其他备注: 
  115          //========================================================================
  116          void WritePara()
  117          {
  118   1              EA = 0;
  119   1          EEPROM_SectorErase(0);
  120   1          EEPROM_SectorErase(512);
  121   1              SysRunState.stParam.ParaCheckSum = CheckSum((BYTE *)&SysRunState.stParam,sizeof(LP_PARAM)-2);//add by ke
             -vin at 20150417
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 3   

  122   1              if (!EEPROM_write(0, (u8 *)&SysRunState.stParam, sizeof(LP_PARAM)))
  123   1          {
  124   2              Error();
  125   2          }   
  126   1              EA = 1;
  127   1      }
  128          
  129          
  130          //向上位机发送命令
  131          void SendData(uint8_t cmd, uint8_t *cdata, uint16_t length)
  132          {
  133   1              uint16_t crc;
  134   1      
  135   1              s_Head.cmd = cmd;
  136   1              s_Head.length = length;
  137   1              memcpy(snedbuf,(uint8_t*)&s_Head,sizeof(STU_CMD));
  138   1              if(length>0)
  139   1              {
  140   2                      memcpy(&snedbuf[sizeof(STU_CMD)],cdata,length);
  141   2              }
  142   1              crc = CRC16(snedbuf,length+sizeof(STU_CMD));
  143   1              memcpy(&snedbuf[length+sizeof(STU_CMD)],(uint8_t*)&crc,2);
  144   1              snedbuf[length+sizeof(STU_CMD)+2] = 0x16;
  145   1              
  146   1              uart485_send(snedbuf,(u8)(length+7));
  147   1      }
  148          
  149          /*******************************************************************************
  150          功能：获取上位机指定的模式
  151          输入：无
  152          输出：工作模式
  153          *******************************************************************************/
  154          int GetWorkMode(void)
  155          {
  156   1        return 3;
  157   1      }
  158          
  159          
  160          
  161          /*******************************************************************************
  162          功能：命令分析与执行
  163          输入：U32 id:指令ID号
  164                unsigned char dlc: 数据长度
  165                unsigned char *cdata:数据指针
  166          输出：无
  167          *******************************************************************************/
  168          STU_CMD gs_CMD={0};
  169          void DataPro(uint8_t *cdata, uint16_t length)
  170          {  
  171   1              uint16_t i;
  172   1          uint16_t crcRev;
  173   1          uint16_t crcOut;
  174   1              //STU_CMD *pCmd = NULL;
  175   1              
  176   1              for(i=0;i<length; i++)
  177   1              {
  178   2                      if(cdata[i] == 0x68)
  179   2                      {
  180   3                              //pCmd = (STU_CMD *)&cdata[i];
  181   3                              memcpy(&gs_CMD,&cdata[i],sizeof(STU_CMD));
  182   3                              if((gs_CMD.length > length-7)||(cdata[i+6+gs_CMD.length] != 0x16))
  183   3                              {
  184   4                                        continue;
  185   4                              }
  186   3                              crcRev = cdata[i+4+gs_CMD.length] + cdata[i+5+gs_CMD.length]*256;
  187   3                              crcOut = CRC16(&cdata[i],gs_CMD.length+4);
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 4   

  188   3                              if(crcRev != crcOut)
  189   3                              {
  190   4                                        continue;
  191   4                              }
  192   3                              
  193   3                              SysRunState.NoUartTime = 0;
  194   3      
  195   3                              switch(gs_CMD.cmd)
  196   3                              {
  197   4                                      case 'C'://联络命令
  198   4                                              ACK_CMD_C((uint8_t*)&SysRunState.stParam.SensorType);
  199   4                                      break;
  200   4      
  201   4                                      case 'V'://读计数
  202   4                                              ACK_CMD_V();
  203   4                                      break;
  204   4                                      
  205   4                                      case 'E'://读工作状态
  206   4                                              ACK_CMD_E();
  207   4                                      break;
  208   4      
  209   4                                      case 'R'://读参数
  210   4                                              ACK_CMD_R();
  211   4                                      break;
  212   4      
  213   4                                      case 'W'://写参数
  214   4                                       if(length-i-5 > sizeof(SYS_PRAM))
  215   4                                       {
  216   5                                              ACK_CMD_W(&cdata[i+4]);
  217   5                                       }
  218   4                                      break;
  219   4      
  220   4                                      case 'S'://存参数
  221   4                                              ACK_CMD_S();
  222   4                                      break;
  223   4      
  224   4                                      case 1://清除累计剂量
  225   4                                              ACK_CMD_ClearDoseSum();
  226   4                                      break;
  227   4                                      
  228   4                                      case 2://清除最大剂量率
  229   4                                              ACK_CMD_ClearMaxDoseRate();
  230   4                                      break;
  231   4                                      
  232   4                                      case 3://探测器自检
  233   4                                              ACK_CMD_SelfCheck();
  234   4                                      break;
  235   4                                      
  236   4                                      case 4://开关探测器
  237   4                                              ACK_CMD_SensorONOFF(cdata[i+4]);
  238   4                                      break;
  239   4                                      
  240   4                                      case 5://电池电量查询
  241   4                                              ACK_CMD_Bat();
  242   4                                      break;
  243   4      
  244   4                                      case 6://报警确认
  245   4                                              ACK_CMD_SureAlarm();
  246   4                                      break;
  247   4      
  248   4                      case 7: // 量程切换
  249   4                          ACK_CMD_GmSw(cdata[i+4]);
  250   4                      break;
  251   4      
  252   4                                      case 'B'://写报警参数
  253   4                                              ACK_CMD_B(&cdata[i+4]);
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 5   

  254   4                                      break;
  255   4      
  256   4                                      case 'F'://读报警参数
  257   4                                              ACK_CMD_F();
  258   4                                      break;
  259   4                                      
  260   4                                      case 0x28://远程升级
  261   4                                              //asm(" mov &0xFFBE, PC;"); //跳转到升级代码
  262   4                                        break;
  263   4                              default:
  264   4                                break;
  265   4                              }
  266   3                              i += (gs_CMD.length+4);
  267   3                      }
  268   2              }
  269   1      }
  270          
  271          /*******************************************************************************
  272          功能：联络命令响应
  273          输入：unsigned char SensorType:传感器类型
  274          输出：无
  275          *******************************************************************************/
  276          void ACK_CMD_C(u8 *SensorType)
  277          {
  278   1              SendData('C',SensorType,6);
  279   1              SENSOR_POWER_ON();
  280   1              LOWCHANNEL_POWER_ON();
  281   1      }
  282          
  283          
  284          
  285          /*******************************************************************************
  286          功能：读命令(R)响应
  287          输入：无
  288          输出：无
  289          *******************************************************************************/
  290          void ACK_CMD_R(void)
  291          {
  292   1              SendData('R',(uint8_t*)&SysRunState.stParam.s_SysParam,sizeof(SYS_PRAM));
  293   1      }
  294          
  295          
  296          /*******************************************************************************
  297          功能：写参数命令(W)响应
  298          输入：unsigned char *cdata:参数
  299          输出：无
  300          *******************************************************************************/
  301          void ACK_CMD_W(unsigned char *cdata)
  302          {
  303   1              memcpy((uint8_t*)&SysRunState.stParam.s_SysParam,cdata,sizeof(SYS_PRAM));
  304   1              SendData('W',NULL,0);
  305   1              //SaveParam(&SysRunState.stParam);
  306   1      }
  307          
  308          
  309          
  310          /*******************************************************************************
  311          功能：存参数命令(S)响应
  312          输入：unsigned char SensorType:传感器类型
  313          输出：无
  314          *******************************************************************************/
  315          void ACK_CMD_S(void)
  316          {
  317   1              SendData('S',NULL,0);
  318   1              SaveParam();
  319   1              MCP4725_OutVol(MCP4725_S1_ADDR,2500-(WORD)SysRunState.stParam.s_SysParam.Z1);//alphy 阈值
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 6   

  320   1              //MCP4725_OutVol(IIC_ADDR_HIGH,(unsigned int)SysRunState.stParam.s_SysParam.Z2);//beta阈值
  321   1      }
  322          
  323          
  324          
  325          /*******************************************************************************
  326          功能：读计数命令(V)响应
  327          输入：unsigned char SensorType:传感器类型
  328          输出：无
  329          *******************************************************************************/
  330          STU_DOSERATE gs_Dose;
  331          void ACK_CMD_V(void)
  332          {
  333   1              memcpy((void*)&gs_Dose,(void*)&SysRunState.s_DoseMSG,sizeof(STU_DOSERATE));
  334   1              SendData('V',(uint8_t*)&gs_Dose,sizeof(STU_DOSERATE));
  335   1      }
  336          
  337          
  338          /*******************************************************************************
  339          功能：写报警参数命令(WF)响应
  340          输入：unsigned char *cdata
  341          输出：无
  342          *******************************************************************************/
  343          void ACK_CMD_B(u8 *cdata)
  344          {
  345   1              memcpy((uint8_t*)&SysRunState.stParam.s_Alarm,cdata,sizeof(SYS_ALARM));
  346   1              SendData('B',NULL,0);
  347   1              //SaveParam(&SysRunState.stParam);
  348   1      } 
  349          
  350          
  351          /*******************************************************************************
  352          功能：读报警参数命令(F)响应
  353          输入：无
  354          输出：无
  355          *******************************************************************************/
  356          void ACK_CMD_F(void)
  357          {
  358   1              SendData('F',(uint8_t*)&SysRunState.stParam.s_Alarm,sizeof(SYS_ALARM));
  359   1      } 
  360          
  361          /*******************************************************************************
  362          功能：工作状态
  363          输入：
  364          输出：
  365          *******************************************************************************/
  366          void ACK_CMD_E(void)
  367          {
  368   1              uint16_t state = 3;
  369   1              
  370   1              SendData('E',(uint8_t*)&state,2);
  371   1      }
  372          
  373          /*******************************************************************************
  374          功能：清除累计剂量(1)响应
  375          输入：
  376          输出：
  377          *******************************************************************************/
  378          void ACK_CMD_ClearDoseSum(void)
  379          {
  380   1              SysRunState.s_DoseMSG.Dose = 0;
  381   1              SendData(1,NULL,0);
  382   1      }
  383          
  384          
  385          
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 7   

  386          /*******************************************************************************
  387          功能：清除最大剂量率(2)响应
  388          输入：
  389          输出：
  390          *******************************************************************************/
  391          void ACK_CMD_ClearMaxDoseRate(void)
  392          {
  393   1              SysRunState.s_DoseMSG.MaxDoseRate = 0;
  394   1              SendData(2,NULL,0);
  395   1      }
  396          
  397          /*******************************************************************************
  398          功能：探测器自检(3)响应
  399          输入：
  400          输出：
  401          *******************************************************************************/
  402          void ACK_CMD_SelfCheck(void)
  403          {
  404   1              //自检
  405   1              uint16_t result=1;
  406   1              SENSOR_POWER_ON();
  407   1              LOWCHANNEL_POWER_ON();
  408   1              if(/*(Get_Low_Counter() < LOW_DIBENDI)||*/(Get_Low_Counter() > LOW_GAOBENDI)
  409   1                 /*||(Get_High_Counter() < HIGH_DIBENDI)*/||(Get_High_Counter() > HIGH_GAOBENDI))
  410   1              {
  411   2                      result = 0;
  412   2              }
  413   1              SendData(3,(uint8_t*)&result,2);
  414   1      }
  415          
  416          /*******************************************************************************
  417          功能：开关探测器(4)响应
  418          输入：
  419          输出：
  420          *******************************************************************************/
  421          void ACK_CMD_SensorONOFF(uint16_t state)
  422          {
  423   1              SendData(4,NULL,0);
  424   1              //开关探测器
  425   1              if(state == 1)
  426   1              {
  427   2                      SENSOR_POWER_ON();
  428   2                      LOWCHANNEL_POWER_ON();
  429   2                      SensorInit();
  430   2              }
  431   1              else
  432   1              {
  433   2                      //DevSleep();
  434   2                      SysRunState.NoUartTime = POWER_OFF_TIME+1;
  435   2              }
  436   1      }
  437          
  438          /*******************************************************************************
  439          功能：电池电量查询(5)响应
  440          输入：
  441          输出：
  442          *******************************************************************************/
  443          STU_BATTERY s_Bat={0};
  444          void ACK_CMD_Bat(void)
  445          {
  446   1              DeviceGetBatAlarm(&s_Bat);
  447   1              
  448   1              SendData(5,(uint8_t*)&s_Bat,sizeof(STU_BATTERY));
  449   1      }
  450          
  451          /*******************************************************************************
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 8   

  452          功能：报警确认(6)响应
  453          输入：
  454          输出：
  455          *******************************************************************************/
  456          void ACK_CMD_SureAlarm(void)
  457          {
  458   1              //报警确认，关闭相应指示灯
  459   1              
  460   1              SendData(6,NULL,0);
  461   1      }
  462          
  463          
  464          /*******************************************************************************
  465          功能：切换高低量程
  466          输入：
  467          输出：
  468          *******************************************************************************/
  469          void ACK_CMD_GmSw(unsigned char Gm)
  470          {
  471   1              if (Gm == 1)
  472   1          {
  473   2              GM_HIGH;
  474   2              }
  475   1          else
  476   1          {
  477   2              GM_LOW;
  478   2          }
  479   1          
  480   1              SendData(7,NULL,0);
  481   1      }
  482          
  483          /*
  484          函数名称:CheckSum
  485          函数描述:校验和函数
  486          输    入:数据、长度
  487          输    出:校验结果
  488          作    者:张红丽
  489          日    期:2012.9.10
  490          
  491          */
  492          //========================================================================
  493          // 函数名称: WORD CheckSum(BYTE *buf, WORD len)
  494          // 函数功能: 校验和函数
  495          // 入口参数: @*buf：数据；@len：长度
  496          // 函数返回: 校验结果
  497          // 当前版本: VER1.0
  498          // 修改日期: 2023.5.5
  499          // 当前作者:
  500          // 其他备注: 
  501          //========================================================================
  502          WORD CheckSum(BYTE *buf, WORD len)
  503          {
  504   1          WORD dwSum = 0;
  505   1          WORD i;
  506   1      
  507   1          for (i = 0; i < len; i++)
  508   1          {
  509   2              dwSum += buf[i];
  510   2          }
  511   1          return dwSum;
  512   1      }
  513              
  514          void SaveParam()
  515          {
  516   1          EA = 0;//禁止中断
  517   1          WritePara();
C251 COMPILER V5.60.0,  CMD                                                                16/05/23  09:58:11  PAGE 9   

  518   1          EA = 1;//允许中断
  519   1      }
  520          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1725     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       264     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        24     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
